# -*- coding: utf-8 -*-
"""komputasi_numerik.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mMLqnpKYzwxJpzwtnLeyOA_uNo1NRZrh
"""

def f(x):
    return x**3 - x - 2  # Ganti dengan fungsi lain sesuai kebutuhan

def bisection(a, b, tol):
    if f(a) * f(b) >= 0:
        print("Syarat f(a) * f(b) < 0 tidak terpenuhi. Coba interval lain.")
        return None

    iterasi = 1
    while abs(b - a) >= tol:
        m = (a + b) / 2.0
        print(f"Iterasi {iterasi}: a = {a:.6f}, b = {b:.6f}, m = {m:.6f}, f(m) = {f(m):.6f}")

        if f(m) == 0:
            return m
        elif f(a) * f(m) < 0:
            b = m
        else:
            a = m
        iterasi += 1

    return (a + b) / 2.0

# Input dari pengguna
print("=== Metode Bisection ===")
a = float(input("Masukkan nilai a: "))
b = float(input("Masukkan nilai b: "))
tol = float(input("Masukkan toleransi error: "))
akar = bisection(a, b, tol)
print(f"Akar pendekatan: {akar:.6f}")

def g(x):
    return 1 + (1 / x)  # Contoh: g(x) = 1 + 1/x untuk mencari akar dari f(x) = x - 1 - 1/x

def fixed_point(x0, tol, max_iter=100):
    print(f"Iterasi 0: x = {x0:.6f}")
    for i in range(1, max_iter + 1):
        x1 = g(x0)
        print(f"Iterasi {i}: x = {x1:.6f}")
        if abs(x1 - x0) < tol:
            return x1
        x0 = x1
    print("Tidak konvergen dalam jumlah iterasi maksimum.")
    return None

# Input dari pengguna
print("\n=== Metode Titik Tetap ===")
x0 = float(input("Masukkan tebakan awal x0: "))
tol = float(input("Masukkan toleransi error: "))
akar_fp = fixed_point(x0, tol)
print(f"Akar pendekatan: {akar_fp:.6f}" if akar_fp is not None else "Gagal menemukan akar.")